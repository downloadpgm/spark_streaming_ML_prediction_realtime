
SPARK1: spark-shell --packages mysql:mysql-connector-java:5.1.49
======

import org.apache.spark.ml.PipelineModel
val model = PipelineModel.load("hdfs://hdpmst:9000/model/housing")

import org.apache.spark.sql.types._
val schema = new StructType(Array(StructField("CRIM",DoubleType), StructField("ZN",DoubleType), StructField("INDUS",DoubleType), StructField("CHAS",DoubleType), StructField("NOX",DoubleType), StructField("RM",DoubleType), StructField("AGE",DoubleType), StructField("DIS",DoubleType), StructField("RAD",DoubleType), StructField("TAX",DoubleType), StructField("PTRATIO",DoubleType), StructField("B",DoubleType), StructField("LSTAT",DoubleType), StructField("MEDV",DoubleType), StructField("MEDV1",DoubleType)))

val streamio = spark.readStream.schema(schema).option("maxFilesPerTrigger",1).csv("hdfs://hdpmst:9000/data/stream")
val pred = model.transform(streamio)

import org.apache.spark.sql.DataFrame

def writePred(df: DataFrame, batchID: Long) {
   df.write.mode("overwrite").saveAsTable("pred") }  // does not work with format("delta") because Hive does not support

val strqry = pred.select('MEDV,'prediction).writeStream.foreachBatch(writePred _).outputMode("append").option("checkpointLocation","hdfs://hdpmst:9000/data/checkpoint").start()


SPARK2: spark-shell --packages mysql:mysql-connector-java:5.1.49
======

// run ./stream.sh in hdpmst container

spark.sql("show tables").show
spark.sql("select * from pred").show

// periodically execute command below while stream.sh is running
spark.sql("refresh table pred").show
spark.sql("select * from pred").show
