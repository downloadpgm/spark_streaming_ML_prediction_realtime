
spark.conf.set("spark.sql.shuffle.partitions",10)

val dfraw = spark.read.format("csv").option("inferSchema","true").load("hdfs://hdpmst:9000/data/adult.data").toDF("age","workclass","fnlwgt","education","education-num","marital_status","occupation","relationship","race","sex","capital_gain","capital_loss","hours_per_week","native_country","income")

import org.apache.spark.ml.feature.SQLTransformer

val sql = new SQLTransformer().setStatement("""
SELECT age,
   case when workclass like "%?%" then "Private" else workclass end as workclass,
   fnlwgt,education,marital_status,
   case when occupation like "%?%" then "Prof-specialty" else occupation end as occupation,
   relationship,race,sex,capital_gain,capital_loss,hours_per_week,
   case when native_country like "%?%" then "United-States" else native_country end as native_country,
   income
FROM __THIS__""")

import org.apache.spark.ml.feature.RFormula
val rf = new RFormula().setFormula("income ~ .")

import org.apache.spark.ml.feature.StandardScaler
val stdScaler = new StandardScaler().
setWithStd(true).
setWithMean(true).
setInputCol("features").
setOutputCol("scaledFeatures")

import org.apache.spark.ml.classification.LogisticRegression
val lr = new LogisticRegression().setFeaturesCol("scaledFeatures")

val Array(trainingData, testData) = dfraw.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(sql,rf,stdScaler,lr))
val pipelinemodel = pipeline.fit(trainingData)

val pred = pipelinemodel.transform(testData)

pred.groupBy("prediction","label").count.show
+----------+-----+-----+
|prediction|label|count|
+----------+-----+-----+
|       0.0|  1.0|  898|
|       1.0|  0.0|  542|
|       0.0|  0.0| 6953|
|       1.0|  1.0| 1408|
+----------+-----+-----+

val predRDD = pred.select("prediction","label").rdd.map( row => (row.getDouble(0),row.getDouble(1))).cache

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(predRDD)

metrics.accuracy
res27: Double = 0.8530762167125804

metrics.confusionMatrix
6953.0  542.0
898.0   1408.0

val pipelinemodel = pipeline.fit(dfraw)
pipelinemodel.write.save("hdfs://hdpmst:9000/model/adult")

