
SPARK1: spark-shell --packages mysql:mysql-connector-java:8.0.32,io.delta:delta-core_2.12:0.7.0
======

import org.apache.spark.ml.PipelineModel
val model = PipelineModel.load("hdfs://hdpmst:9000/model/adult")

import org.apache.spark.sql.types._
val schema = new StructType(Array(StructField("age",IntegerType,true), StructField("workclass",StringType,true), StructField("fnlwgt",DoubleType,true), StructField("education",StringType,true), StructField("education-num",DoubleType,true), StructField("marital_status",StringType,true), StructField("occupation",StringType,true), StructField("relationship",StringType,true), StructField("race",StringType,true), StructField("sex",StringType,true), StructField("capital_gain",DoubleType,true), StructField("capital_loss",DoubleType,true), StructField("hours_per_week",DoubleType,true), StructField("native_country",StringType,true), StructField("income",StringType,true)))

val streamio = spark.readStream.schema(schema).csv("hdfs://hdpmst:9000/data/stream")
val pred = model.transform(streamio)

import org.apache.spark.sql.DataFrame

def writePred(df: DataFrame, batchID: Long) {
   df.write.mode("overwrite").format("delta").save("hdfs://hdpmst:9000/data/pred") }  // overwrite using format("delta") 

val strqry = pred.select('age,'label,'prediction).writeStream.foreachBatch(writePred _).outputMode("append").option("overwriteSchema", "true").option("checkpointLocation","hdfs://hdpmst:9000/data/checkpoint").start()


SPARK2: spark-shell --packages mysql:mysql-connector-java:8.0.32,io.delta:delta-core_2.12:0.7.0
======

// run ./stream.sh in hdpmst container

val df = spark.read.format("delta").load("hdfs://hdpmst:9000/data/pred")

df.createOrReplaceTempView("pred")

// periodically execute command below while stream.sh is running
spark.sql("select * from pred").show
